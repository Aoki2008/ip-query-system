name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  # 代码质量检查
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Check

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Python dependencies
      run: |
        cd backend-fastapi
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        pip install -r requirements.txt

    - name: Python code formatting check
      run: |
        cd backend-fastapi
        black --check --diff . || true
        isort --check-only --diff . || true

    - name: Python linting
      run: |
        cd backend-fastapi
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics || true

    - name: Type checking
      run: |
        cd backend-fastapi
        mypy . --ignore-missing-imports || true

  # 后端测试
  backend-tests:
    runs-on: ubuntu-latest
    name: Backend Tests

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend-fastapi/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        cd backend-fastapi
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio httpx

    - name: Create test GeoIP database
      run: |
        cd backend-fastapi
        mkdir -p data
        echo "fake_geoip_data" > data/GeoLite2-City.mmdb

    - name: Run tests with coverage
      env:
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        TESTING: true
        DATABASE_URL: sqlite:///./test.db
      run: |
        cd backend-fastapi
        python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=html || true

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: ./backend-fastapi/coverage.xml
        flags: backend
        name: backend-coverage

  # 前端测试
  frontend-tests:
    runs-on: ubuntu-latest
    name: Frontend Tests

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend-vue3/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend-vue3
        npm ci

    - name: Run type checking
      run: |
        cd frontend-vue3
        npm run build || true

    - name: Build application
      run: |
        cd frontend-vue3
        npm run build

  # 管理后台测试
  admin-frontend-tests:
    runs-on: ubuntu-latest
    name: Admin Frontend Tests

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend-admin/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend-admin
        npm ci

    - name: Run type checking
      run: |
        cd frontend-admin
        npm run build || true

    - name: Build application
      run: |
        cd frontend-admin
        npm run build

  # 安全扫描
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Docker构建测试
  docker-build:
    runs-on: ubuntu-latest
    name: Docker Build Test
    needs: [backend-tests, frontend-tests, admin-frontend-tests]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create test GeoIP database
      run: |
        mkdir -p backend-fastapi/data
        echo "fake_geoip_data" > backend-fastapi/data/GeoLite2-City.mmdb

    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend-fastapi
        file: ./backend-fastapi/Dockerfile
        push: false
        tags: ip-query-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend-vue3
        file: ./frontend-vue3/Dockerfile
        push: false
        tags: ip-query-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build admin frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend-admin
        file: ./frontend-admin/Dockerfile
        push: false
        tags: ip-query-admin:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test docker-compose
      run: |
        # 验证配置文件
        docker-compose config
        docker-compose -f docker-compose.dev.yml config

  # 部署到测试环境
  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: [code-quality, backend-tests, frontend-tests, admin-frontend-tests, docker-build]
    if: github.ref == 'refs/heads/develop'

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        echo "Backend: FastAPI application"
        echo "Frontend: Vue3 IP查询工具"
        echo "Admin: Vue3 管理后台"
        # 这里可以添加实际的部署脚本
        # 例如：部署到测试服务器、更新Kubernetes配置等

  # 部署到生产环境
  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [code-quality, backend-tests, frontend-tests, admin-frontend-tests, docker-build]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        echo "✅ Backend API: FastAPI"
        echo "✅ Frontend: Vue3 IP查询工具"
        echo "✅ Admin: Vue3 管理后台"
        echo "✅ Database: SQLite"
        echo "✅ Cache: Redis"
        # 这里可以添加实际的生产部署脚本
