version: '3.8'

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: ip_query_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root_password_123
      MYSQL_DATABASE: ip_query_system
      MYSQL_USER: ip_query_user
      MYSQL_PASSWORD: ip_query_pass_123
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/init_data.sql:/docker-entrypoint-initdb.d/02-init_data.sql
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - ip_query_network

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: ip_query_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass redis_pass_123
    networks:
      - ip_query_network

  # Node.js API服务
  api-service:
    build:
      context: ./api-system
      dockerfile: Dockerfile
    container_name: ip_query_api
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: ip_query_system
      DB_USER: ip_query_user
      DB_PASSWORD: ip_query_pass_123
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis_pass_123
      JWT_SECRET: your_jwt_secret_key_here
      MAXMIND_LICENSE_KEY: your_maxmind_license_key
    volumes:
      - ./api-system/logs:/app/logs
      - ./api-system/uploads:/app/uploads
    depends_on:
      - mysql
      - redis
    networks:
      - ip_query_network

  # Laravel管理后台
  admin-panel:
    build:
      context: ./admin-panel
      dockerfile: Dockerfile
    container_name: ip_query_admin
    restart: unless-stopped
    ports:
      - "8080:80"
    environment:
      APP_ENV: production
      APP_DEBUG: false
      APP_KEY: base64:your_laravel_app_key_here
      DB_CONNECTION: mysql
      DB_HOST: mysql
      DB_PORT: 3306
      DB_DATABASE: ip_query_system
      DB_USERNAME: ip_query_user
      DB_PASSWORD: ip_query_pass_123
      REDIS_HOST: redis
      REDIS_PASSWORD: redis_pass_123
      REDIS_PORT: 6379
      CACHE_DRIVER: redis
      SESSION_DRIVER: redis
      QUEUE_CONNECTION: redis
    volumes:
      - ./admin-panel/storage:/var/www/html/storage
      - ./admin-panel/bootstrap/cache:/var/www/html/bootstrap/cache
    depends_on:
      - mysql
      - redis
    networks:
      - ip_query_network

  # Next.js前端应用
  frontend:
    build:
      context: ./ip-tool
      dockerfile: Dockerfile
    container_name: ip_query_frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_SITE_NAME: IP查询系统
      NEXTAUTH_URL: http://localhost:3000
      NEXTAUTH_SECRET: your_nextauth_secret_here
    depends_on:
      - api-service
    networks:
      - ip_query_network

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: ip_query_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - api-service
      - admin-panel
    networks:
      - ip_query_network

volumes:
  mysql_data:
  redis_data:

networks:
  ip_query_network:
    driver: bridge
